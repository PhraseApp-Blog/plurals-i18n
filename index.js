const input = document.querySelector("#input");
const output = document.querySelector("#output");
const ordinalOutput = document.querySelector("#ordinalOutput");
const lblCount = document.querySelector("#lblCount");
const lblMessage = document.querySelector("#lblMessage");
const lblOrdinalMessage = document.querySelector("#lblOrdinalMessage");

const initialValue = 1;
input.value = initialValue;
input.addEventListener("input", render);

function render() {
  lblCount.textContent = i18next.t("countLabel");
  lblMessage.textContent = i18next.t("messageLabel");
  lblOrdinalMessage.textContent = i18next.t("ordinalMessageLabel");

  output.textContent = i18next.t("message", { count: Number(input.value) });
  ordinalOutput.textContent = i18next.t("ordinalMessage", {
    count: Number(input.value),
  });
}

function changeLanguage(lang) {
  i18next.changeLanguage(lang);
  document.lang = lang;
  document.dir = lang === "ar" ? "rtl" : "ltr";
  render();
}

i18next
  .use(window.i18nextICU)
  .init({
    lng: "en",
    debug: true,
    resources: {
      en: {
        translation: {
          countLabel: "Count",
          messageLabel: "Message",
          message: `
            {count, plural,
              =0 {ðŸŒ³ We haven't planted any trees yet!}
              one {ðŸŒ³ We've planted one tree so far!}
              other {ðŸŒ³ We've planted # trees so far!}
            }`,
          ordinalMessageLabel: "Ordinal Message",
          ordinalMessage: `Yay! Our
              {count, selectordinal,
                one {#st}
                two {#nd}
                few {#rd}
                other {#th}
              }
            tree!`,
        },
      },
      ar: {
        translation: {
          countLabel: "Ø§Ù„Ø¹Ø¯Ø¯",
          messageLabel: "Ø§Ù„Ø±Ø³Ø§Ù„Ø©",
          message: `{count, plural,
                zero {ðŸŒ³ Ù„Ù… Ù†Ø²Ø±Ø¹ Ø£ÙŠ Ø´Ø¬Ø±Ø© Ø­ØªÙ‰ Ø§Ù„Ø¢Ù†!}
                one {ðŸŒ³ Ù„Ù‚Ø¯ Ø²Ø±Ø¹Ù†Ø§ Ø´Ø¬Ø±Ø© {count, number} Ø­ØªÙ‰ Ø§Ù„Ø¢Ù†!}
                two {ðŸŒ³ Ù„Ù‚Ø¯ Ø²Ø±Ø¹Ù†Ø§ Ø´Ø¬Ø±ØªÙŠÙ† # Ø­ØªÙ‰ Ø§Ù„Ø¢Ù†!}
                few {ðŸŒ³ Ù„Ù‚Ø¯ Ø²Ø±Ø¹Ù†Ø§ # Ø´Ø¬Ø±Ø§Øª Ø­ØªÙ‰ Ø§Ù„Ø¢Ù†!}
                many {ðŸŒ³ Ù„Ù‚Ø¯ Ø²Ø±Ø¹Ù†Ø§ # Ø´Ø¬Ø±Ø© Ø­ØªÙ‰ Ø§Ù„Ø¢Ù†!}
                other {ðŸŒ³ Ù„Ù‚Ø¯ Ø²Ø±Ø¹Ù†Ø§ # Ø´Ø¬Ø±Ø© Ø­ØªÙ‰ Ø§Ù„Ø¢Ù†!}
            }`,
          ordinalMessageLabel: "Ø§Ù„Ø±Ø³Ø§Ù„Ø© Ø§Ù„ØªØ±ØªÙŠØ¨ÙŠØ©",
          ordinalMessage: `
            Ø±Ø§Ø¦Ø¹! Ø´Ø¬Ø±ØªÙ†Ø§ Ø§Ù„Ù€
            {count, selectordinal, other {#}}
            !`,
        },
      },
    },
  })
  .then((_) => {
    render();
  })
  .catch(console.error);
